generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model UserProfile {
  id           String   @id @default(cuid())
  userId       String   @unique
  name         String
  imageUrl     String
  email        String?
  researchLab  String
  academicYear String
  description  String?
  isCheckedIn  Boolean @default(false)
  github       String?
  x            String?
  instagram    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  posts        Post[]
  techSkills   TechSkill[]
  Attendance Attendance[]

  @@index([userId])
}

model Post {
  id        String      @id @default(cuid())
  title     String
  content   Json?
  published Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  authorId  String
  author    UserProfile @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([authorId])
}

model TechSkill {
  id        String   @id @default(cuid())
  name      String
  category  String
  iconName  String?
  profileId String
  profile   UserProfile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

model Attendance {
  id         String      @id @default(cuid())
  user_id    String      
  profile    UserProfile @relation(fields: [user_id], references: [id], onDelete: Cascade)
  check_in   DateTime    @default(now()) @map("check_in")
  check_out  DateTime?   @map("check_out")
  created_at DateTime    @default(now()) @map("created_at")

  @@index([user_id])
}